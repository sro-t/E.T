from flask import Flask, request, jsonify
import requests
import json
import os
from datetime import datetime, timedelta

app = Flask(__name__)

# === Dropbox APIÔºà„É™„Éï„É¨„ÉÉ„Ç∑„É•„Éà„Éº„ÇØ„É≥ÊñπÂºèÔºâ ===
DROPBOX_CLIENT_ID = os.getenv("DROPBOX_CLIENT_ID")
DROPBOX_CLIENT_SECRET = os.getenv("DROPBOX_CLIENT_SECRET")
DROPBOX_REFRESH_TOKEN = os.getenv("DROPBOX_REFRESH_TOKEN")

def get_dropbox_access_token():
    try:
        url = "https://api.dropbox.com/oauth2/token"
        data = {
            "grant_type": "refresh_token",
            "refresh_token": DROPBOX_REFRESH_TOKEN,
            "client_id": DROPBOX_CLIENT_ID,
            "client_secret": DROPBOX_CLIENT_SECRET
        }
        response = requests.post(url, data=data)
        response.raise_for_status()
        token = response.json().get("access_token")
        print("‚úÖ Dropbox „Ç¢„ÇØ„Çª„Çπ„Éà„Éº„ÇØ„É≥ÂèñÂæóÊàêÂäü")
        return token
    except Exception as e:
        print(f"‚ùå Dropbox „Ç¢„ÇØ„Çª„Çπ„Éà„Éº„ÇØ„É≥ÂèñÂæóÂ§±Êïó: {e}")
        return None

@app.route("/dropbox-files", methods=["GET"])
def list_dropbox_files():
    token = get_dropbox_access_token()
    if not token:
        return jsonify({"error": "Dropbox access token error"}), 500
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(
        "https://api.dropboxapi.com/2/files/list_folder",
        headers=headers,
        json={"path": ""}
    )
    return jsonify(response.json())

# === ÈÄöÁü•„ÅÆ„Çπ„Éë„É†Èò≤Ê≠¢Áî® ===
last_notification_time = None

# === Dropbox Webhook „Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà ===
@app.route("/webhook", methods=["GET", "POST"])
def dropbox_webhook():
    global last_notification_time

    if request.method == "GET":
        challenge = request.args.get("challenge")
        print(f"‚úÖ Dropbox webhook „ÉÅ„É£„É¨„É≥„Ç∏ÂøúÁ≠î: {challenge}")
        return challenge, 200

    elif request.method == "POST":
        now = datetime.now()
        if last_notification_time and now - last_notification_time < timedelta(minutes=2):
            print("‚è≥ ÈÄöÁü•„Çπ„Ç≠„ÉÉ„ÉóÔºà2ÂàÜ‰ª•ÂÜÖ„ÅÆÈÄ£Á∂öÔºâ")
            return "", 200

        last_notification_time = now
        print("üì¶ Dropbox Webhook POST Âèó‰ø°„Åó„Åæ„Åó„Åü ‚Üí ÈÄöÁü•ÈÄÅ‰ø°")
        send_line_message("üì¶ Dropbox „Å´„Éï„Ç°„Ç§„É´„ÅåËøΩÂä†„Åæ„Åü„ÅØÂ§âÊõ¥„Åï„Çå„Åæ„Åó„Åü")
        return "", 200

# === LINE API ===
LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_USER_ID = os.getenv("LINE_USER_ID")

def send_line_message(message):
    try:
        headers = {
            "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}",
            "Content-Type": "application/json"
        }
        data = {
            "to": LINE_USER_ID,
            "messages": [{"type": "text", "text": message}]
        }
        res = requests.post("https://api.line.me/v2/bot/message/push", headers=headers, json=data)
        res.raise_for_status()
        print("‚úÖ LINE PushÈÄöÁü• ÊàêÂäü")
    except Exception as e:
        print(f"‚ùå LINEÈÄöÁü•Â§±Êïó: {e}")

@app.route("/line-webhook", methods=["POST"])
def line_webhook():
    payload = request.json
    try:
        events = payload.get("events", [])
        for event in events:
            if event.get("type") == "message" and event["message"].get("type") == "text":
                user_message = event["message"]["text"]
                reply_token = event["replyToken"]
                reply_to_line(reply_token, "„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô")
        print("‚úÖ LINE Webhook Ê≠£Â∏∏Âèó‰ø°")
    except Exception as e:
        print(f"‚ùå LINE Webhook „Ç®„É©„Éº: {e}")
    return "OK", 200

def reply_to_line(reply_token, message):
    try:
        headers = {
            "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}",
            "Content-Type": "application/json"
        }
        data = {
            "replyToken": reply_token,
            "messages": [{"type": "text", "text": message}]
        }
        requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=data)
        print("‚úÖ LINEËøî‰ø° ÊàêÂäü")
    except Exception as e:
        print(f"‚ùå LINEËøî‰ø°Â§±Êïó: {e}")

# === GASÈÄ£Êê∫Ôºà‰ªÆÔºâ ===
@app.route("/run-gas", methods=["POST"])
def run_gas():
    print("‚úÖ GASËµ∑ÂãïÔºà‰ªÆÔºâ")
    return jsonify({"status": "GAS call triggered (‰ªÆ)"})


# === „ÉÜ„Çπ„ÉàÁî®ÔºàRender„ÅÆÁ®ºÂÉç„ÉÅ„Çß„ÉÉ„ÇØÔºâ ===
@app.route("/", methods=["GET"])
def home():
    return "‚úÖ AIÁµ±Âêà„Çµ„Éº„Éê„ÉºÁ®ºÂÉç‰∏≠"


# === Ëµ∑Âãï ===
if __name__ == "__main__":
    app.run(debug=True)